=== Symbol Table for test.c ===
File: test.c
   language: python
   range: ((0, 0), (17, 1))
   substring: (0, 169)
   body_sub: (0, 169)
   body: ['aa', 'comment', 'foo', 'bb', 'main']
Function: aa
   language: c
   range: ((0, 0), (2, 1))
   substring: (0, 24)
   body_sub: (9, 24)
   parent: test.c
   return_type: int
Function: foo
   language: c
   range: ((4, 0), (6, 1))
   substring: (52, 84)
   docstring: /** This is a docstring */
   body_sub: (71, 84)
   parent: test.c
   parameters: [x:int**]
   return_type: int*
Function: bb
   language: c
   range: ((8, 0), (10, 1))
   substring: (86, 110)
   body_sub: (95, 110)
   parent: test.c
   return_type: int
Function: main
   language: c
   range: ((12, 0), (17, 1))
   substring: (112, 169)
   body_sub: (123, 169)
   parent: test.c
   return_type: int
=== Symbol Table for test.js ===
File: test.js
   language: python
   range: ((0, 0), (3, 18))
   substring: (0, 111)
   body_sub: (0, 111)
   body: ['comment', 'f1', 'comment', 'f2']
Function: f1
   language: javascript
   range: ((1, 0), (1, 27))
   substring: (22, 49)
   docstring: /** Some docstring */
   body_sub: (36, 49)
   parent: test.js
   has_return: True
Function: f2
   language: javascript
   range: ((3, 0), (3, 18))
   substring: (93, 111)
   docstring: /** Some docstring on an arrow function */
   parent: test.js
=== Symbol Table for test.java ===
File: test.java
   language: python
   range: ((0, 0), (24, 6))
   substring: (0, 458)
   body_sub: (0, 458)
   body: ['line_comment', 'Bicycle', 'block_comment', 'Math', 'Animal', 'line_comment']
Function: braking
   language: java
   range: ((7, 4), (9, 5))
   substring: (124, 203)
   scope: Bicycle.
   body_sub: (146, 203)
   parent: Bicycle
   return_type: void
Class: Bicycle
   language: java
   range: ((1, 0), (10, 1))
   substring: (21, 205)
   docstring: // This is docstring
   body_sub: (42, 205)
   body: ['line_comment', 'field_declaration', 'line_comment', 'braking']
   parent: test.java
Function: sum
   language: java
   range: ((14, 4), (17, 5))
   substring: (255, 343)
   scope: Math.
   body_sub: (291, 343)
   parent: Math
   parameters: [int a:int, int b:int]
   return_type: int
   has_return: True
Class: Math
   language: java
   range: ((13, 0), (18, 1))
   substring: (231, 345)
   docstring: /* This is docstring */
   body_sub: (249, 345)
   body: ['sum']
   parent: test.java
Interface: Animal
   language: java
   range: ((20, 0), (23, 1))
   substring: (347, 451)
   body_sub: (364, 451)
   parent: test.java
=== Symbol Table for test.ts ===
File: test.ts
   language: python
   range: ((0, 0), (20, 1))
   substring: (0, 458)
   body_sub: (0, 458)
   body: ['a', 'ts', 'ts2', 'A', 'RunHelperSyncResult', 'HelperStatus', 'if$0']
TypeDefinition: a
   language: typescript
   range: ((0, 0), (0, 24))
   substring: (0, 24)
   parent: test.ts
Function: ts
   language: typescript
   range: ((1, 0), (1, 56))
   substring: (25, 81)
   body_sub: (69, 81)
   parent: test.ts
   parameters: [x:number, opt?:string]
   return_type: number
   has_return: True
Function: ts2
   language: typescript
   range: ((2, 7), (2, 51))
   substring: (89, 133)
   exported: True
   body_sub: (120, 133)
   parent: test.ts
   return_type: array<number>
   has_return: True
Function: constructor
   language: typescript
   range: ((4, 4), (4, 20))
   substring: (155, 171)
   scope: A.
   body_sub: (169, 171)
   parent: A
Function: load
   language: typescript
   range: ((5, 4), (7, 5))
   substring: (176, 222)
   scope: A.
   body_sub: (198, 222)
   parent: A
   async
   parameters: [v:number]
   has_return: True
Class: A
   language: typescript
   range: ((3, 7), (8, 1))
   substring: (141, 224)
   exported: True
   body_sub: (149, 224)
   body: ['constructor', 'load']
   parent: test.ts
Interface: RunHelperSyncResult
   language: typescript
   range: ((9, 0), (12, 1))
   substring: (225, 290)
   body_sub: (255, 290)
   parent: test.ts
TypeDefinition: HelperStatus
   language: typescript
   range: ((13, 0), (13, 74))
   substring: (291, 365)
   parent: test.ts
Guard: guard$0
   language: typescript
   range: ((15, 3), (15, 9))
   substring: (370, 376)
   scope: if$0.
   parent: if$0
   condition: (true)
Expression: expression$0
   language: typescript
   range: ((16, 4), (16, 23))
   substring: (383, 402)
   scope: if$0.body$0.
   parent: if$0.body$0
   code: console.log("true")
Expression: expression$1
   language: typescript
   range: ((17, 4), (17, 19))
   substring: (407, 422)
   scope: if$0.body$0.
   parent: if$0.body$0
   code: congole.log(42)
Body: body$0
   language: typescript
   range: ((15, 10), (18, 1))
   substring: (377, 424)
   scope: if$0.
   body: ['expression$0', 'expression$1']
   parent: if$0
   block: ['expression$0', 'expression$1']
Expression: expression$0
   language: typescript
   range: ((19, 4), (19, 24))
   substring: (436, 456)
   scope: if$0.body$1.
   parent: if$0.body$1
   code: console.log("false")
Body: body$1
   language: typescript
   range: ((18, 7), (20, 1))
   substring: (430, 458)
   scope: if$0.
   body: ['expression$0']
   parent: if$0
   block: ['expression$0']
If: if$0
   language: typescript
   range: ((15, 0), (20, 1))
   substring: (367, 458)
   body: ['guard$0', 'body$0', 'body$1']
   parent: test.ts
   if_case: Case(guard$0, body$0)
   else_body: body$1
=== Symbol Table for test.tsx ===
File: test.tsx
   language: python
   range: ((0, 0), (1, 27))
   substring: (0, 50)
   body_sub: (0, 50)
   body: ['expression$0', 'tsx']
Expression: expression$0
   language: tsx
   range: ((0, 0), (0, 22))
   substring: (0, 22)
   parent: test.tsx
   code: d = <div> "abc" </div>
Function: tsx
   language: tsx
   range: ((1, 0), (1, 27))
   substring: (23, 50)
   body_sub: (38, 50)
   parent: test.tsx
   has_return: True
=== Symbol Table for test.py ===
File: test.py
   language: python
   range: ((0, 0), (57, 32))
   substring: (0, 1144)
   body_sub: (0, 1144)
   body: ['A', 'B', 'import_statement', 'import_statement', 'import_statement', 'import_from_statement', 'import_from_statement', 'outer_fun', 'some_conditionals', 'with_nested_conditionals', 'for$0']
Expression: expression$0
   language: python
   range: ((1, 4), (4, 7))
   substring: (18, 69)
   scope: A.
   parent: A
   code: """
    This is a docstring
    for class A
    """
Expression: expression$0
   language: python
   range: ((7, 8), (7, 33))
   substring: (97, 122)
   scope: A.py.
   parent: A.py
   code: """This is a docstring"""
Function: py
   language: python
   range: ((6, 4), (8, 16))
   substring: (75, 139)
   scope: A.
   docstring: """This is a docstring"""
   body_sub: (97, 139)
   body: ['expression$0', 'return_statement']
   parent: A
   parameters: [x, y]
   has_return: True
Class: A(C,D)
   language: python
   range: ((0, 0), (8, 16))
   substring: (0, 139)
   docstring: """
    This is a docstring
    for class A
    """
   body_sub: (18, 139)
   body: ['expression$0', 'py']
   parent: test.py
Function: insert_code
   language: python
   range: ((11, 4), (14, 12))
   substring: (173, 311)
   scope: B.
   body_sub: (307, 311)
   body: ['pass_statement']
   parent: B
   async
   parameters: [self, document:str, cursor_offset:int, goal:Optional<str>=None]
   return_type: InsertCodeResult
Function: load
   language: python
   range: ((15, 4), (16, 12))
   substring: (316, 353)
   scope: B.
   body_sub: (349, 353)
   body: ['pass_statement']
   parent: B
   async
   parameters: [self, v]
Function: nested
   language: python
   range: ((18, 8), (19, 16))
   substring: (380, 410)
   scope: B.Nested.
   body_sub: (406, 410)
   body: ['pass_statement']
   parent: B.Nested
Class: Nested
   language: python
   range: ((17, 4), (19, 16))
   substring: (358, 410)
   scope: B.
   body_sub: (380, 410)
   body: ['nested']
   parent: B
Class: B
   language: python
   range: ((9, 0), (19, 16))
   substring: (140, 410)
   body_sub: (153, 410)
   body: ['insert_code', 'load', 'Nested']
   parent: test.py
Function: inner_fun
   language: python
   range: ((28, 4), (29, 12))
   substring: (562, 599)
   scope: outer_fun.
   body_sub: (595, 599)
   body: ['pass_statement']
   parent: outer_fun
   return_type: None
Function: outer_fun
   language: python
   range: ((27, 0), (29, 12))
   substring: (533, 599)
   body_sub: (562, 599)
   body: ['inner_fun']
   parent: test.py
   return_type: None
Expression: expression$0
   language: python
   range: ((32, 4), (32, 21))
   substring: (647, 664)
   scope: some_conditionals.
   parent: some_conditionals
   code: """explanation"""
Guard: guard$0
   language: python
   range: ((33, 7), (33, 18))
   substring: (672, 683)
   scope: some_conditionals.if$0.
   parent: some_conditionals.if$0
   condition: cond == "a"
Body: body$0
   language: python
   range: ((34, 8), (34, 12))
   substring: (693, 697)
   scope: some_conditionals.if$0.
   body: ['pass_statement']
   parent: some_conditionals.if$0
   block: ['pass_statement']
Guard: guard$1
   language: python
   range: ((35, 9), (35, 20))
   substring: (707, 718)
   scope: some_conditionals.if$0.
   parent: some_conditionals.if$0
   condition: cond == "b"
Body: body$1
   language: python
   range: ((36, 8), (36, 12))
   substring: (728, 732)
   scope: some_conditionals.if$0.
   body: ['pass_statement']
   parent: some_conditionals.if$0
   block: ['pass_statement']
Guard: guard$2
   language: python
   range: ((37, 9), (37, 20))
   substring: (742, 753)
   scope: some_conditionals.if$0.
   parent: some_conditionals.if$0
   condition: cond == "c"
Body: body$2
   language: python
   range: ((38, 8), (38, 12))
   substring: (763, 767)
   scope: some_conditionals.if$0.
   body: ['pass_statement']
   parent: some_conditionals.if$0
   block: ['pass_statement']
Body: body$3
   language: python
   range: ((40, 8), (41, 12))
   substring: (786, 803)
   scope: some_conditionals.if$0.
   body: ['pass_statement', 'pass_statement']
   parent: some_conditionals.if$0
   block: ['pass_statement', 'pass_statement']
If: if$0
   language: python
   range: ((33, 4), (41, 12))
   substring: (669, 803)
   scope: some_conditionals.
   body: ['guard$0', 'body$0', 'guard$1', 'body$1', 'guard$2', 'body$2', 'body$3']
   parent: some_conditionals
   if_case: Case(guard$0, body$0)
   elif_cases: [Case(guard$1, body$1), Case(guard$2, body$2)]
   else_body: body$3
Guard: guard$3
   language: python
   range: ((43, 7), (43, 15))
   substring: (835, 843)
   scope: some_conditionals.if$1.
   parent: some_conditionals.if$1
   condition: 34 == 34
Body: body$4
   language: python
   range: ((44, 8), (45, 12))
   substring: (853, 870)
   scope: some_conditionals.if$1.
   body: ['pass_statement', 'pass_statement']
   parent: some_conditionals.if$1
   block: ['pass_statement', 'pass_statement']
If: if$1
   language: python
   range: ((43, 4), (45, 12))
   substring: (832, 870)
   scope: some_conditionals.
   body: ['guard$3', 'body$4']
   parent: some_conditionals
   if_case: Case(guard$3, body$4)
Function: some_conditionals
   language: python
   range: ((31, 0), (45, 12))
   substring: (601, 870)
   docstring: """explanation"""
   body_sub: (647, 870)
   body: ['expression$0', 'if$0', 'comment', 'if$1']
   parent: test.py
   parameters: [cond:str]
   return_type: None
Guard: guard$0
   language: python
   range: ((48, 7), (48, 18))
   substring: (928, 939)
   scope: with_nested_conditionals.if$0.
   parent: with_nested_conditionals.if$0
   condition: cond == "a"
Guard: guard$0
   language: python
   range: ((49, 11), (49, 22))
   substring: (952, 963)
   scope: with_nested_conditionals.if$0.body$0.if$0.
   parent: with_nested_conditionals.if$0.body$0.if$0
   condition: cond == "b"
Call: call$0
   language: python
   range: ((50, 16), (50, 22))
   substring: (981, 987)
   scope: with_nested_conditionals.if$0.body$0.if$0.body$0.expression$0.
   parent: with_nested_conditionals.if$0.body$0.if$0.body$0.expression$0
   function_name: foo
   arguments: ['1']
Call: call$1
   language: python
   range: ((50, 25), (50, 31))
   substring: (990, 996)
   scope: with_nested_conditionals.if$0.body$0.if$0.body$0.expression$0.call.
   parent: with_nested_conditionals.if$0.body$0.if$0.body$0.expression$0
   function_name: bar
   arguments: ['2']
Expression: expression$0
   language: python
   range: ((50, 12), (50, 31))
   substring: (977, 996)
   scope: with_nested_conditionals.if$0.body$0.if$0.body$0.
   body: ['call$0', 'call$1']
   parent: with_nested_conditionals.if$0.body$0.if$0.body$0
   code: x = call$0 + call$1
Body: body$0
   language: python
   range: ((50, 12), (50, 31))
   substring: (977, 996)
   scope: with_nested_conditionals.if$0.body$0.if$0.
   body: ['expression$0']
   parent: with_nested_conditionals.if$0.body$0.if$0
   block: ['expression$0']
If: if$0
   language: python
   range: ((49, 8), (50, 31))
   substring: (949, 996)
   scope: with_nested_conditionals.if$0.body$0.
   body: ['guard$0', 'body$0']
   parent: with_nested_conditionals.if$0.body$0
   if_case: Case(guard$0, body$0)
Guard: guard$1
   language: python
   range: ((51, 11), (51, 22))
   substring: (1008, 1019)
   scope: with_nested_conditionals.if$0.body$0.if$1.
   parent: with_nested_conditionals.if$0.body$0.if$1
   condition: cond == "c"
Call: call$0
   language: python
   range: ((52, 12), (52, 26))
   substring: (1033, 1047)
   scope: with_nested_conditionals.if$0.body$0.if$1.body$1.
   parent: with_nested_conditionals.if$0.body$0.if$1.body$1
   function_name: print
   arguments: ['"hello"']
Call: call$1
   language: python
   range: ((53, 12), (53, 26))
   substring: (1060, 1074)
   scope: with_nested_conditionals.if$0.body$0.if$1.body$1.
   parent: with_nested_conditionals.if$0.body$0.if$1.body$1
   function_name: print
   arguments: ['"world"']
Body: body$1
   language: python
   range: ((52, 12), (53, 26))
   substring: (1033, 1074)
   scope: with_nested_conditionals.if$0.body$0.if$1.
   body: ['call$0', 'call$1']
   parent: with_nested_conditionals.if$0.body$0.if$1
   block: ['call$0', 'call$1']
If: if$1
   language: python
   range: ((51, 8), (53, 26))
   substring: (1005, 1074)
   scope: with_nested_conditionals.if$0.body$0.
   body: ['guard$1', 'body$1']
   parent: with_nested_conditionals.if$0.body$0
   if_case: Case(guard$1, body$1)
Body: body$0
   language: python
   range: ((49, 8), (53, 26))
   substring: (949, 1074)
   scope: with_nested_conditionals.if$0.
   body: ['if$0', 'if$1']
   parent: with_nested_conditionals.if$0
   block: ['if$0', 'if$1']
If: if$0
   language: python
   range: ((48, 4), (53, 26))
   substring: (925, 1074)
   scope: with_nested_conditionals.
   body: ['guard$0', 'body$0']
   parent: with_nested_conditionals
   if_case: Case(guard$0, body$0)
Function: with_nested_conditionals
   language: python
   range: ((47, 0), (53, 26))
   substring: (872, 1074)
   body_sub: (925, 1074)
   body: ['if$0']
   parent: test.py
   parameters: [cond:str]
   return_type: None
Call: call$0
   language: python
   range: ((55, 9), (55, 18))
   substring: (1085, 1094)
   scope: for$0.
   parent: for$0
   function_name: range
   arguments: ['10']
Call: call$0
   language: python
   range: ((56, 4), (56, 15))
   substring: (1100, 1111)
   scope: for$0.body$0.
   parent: for$0.body$0
   function_name: print
   arguments: ['i+1']
Call: call$1
   language: python
   range: ((57, 14), (57, 31))
   substring: (1126, 1143)
   scope: for$0.body$0.expression$0.
   parent: for$0.body$0.expression$0
   function_name: get_some_value
   arguments: ['i']
Expression: expression$0
   language: python
   range: ((57, 4), (57, 32))
   substring: (1116, 1144)
   scope: for$0.body$0.
   body: ['call$1']
   parent: for$0.body$0
   code: x = await(call$1)
Body: body$0
   language: python
   range: ((56, 4), (57, 32))
   substring: (1100, 1144)
   scope: for$0.
   body: ['call$0', 'expression$0']
   parent: for$0
   block: ['call$0', 'expression$0']
For: for$0
   language: python
   range: ((55, 0), (57, 32))
   substring: (1076, 1144)
   body_sub: (1100, 1144)
   body: ['call$0', 'body$0']
   parent: test.py
   for i in call$0: body$0
=== Symbol Table for test.cpp ===
File: test.cpp
   language: python
   range: ((0, 0), (7, 1))
   substring: (0, 142)
   body_sub: (0, 142)
   body: ['namespace_name']
Function: add
   language: cpp
   range: ((2, 4), (2, 43))
   substring: (32, 71)
   scope: namespace_name::
   body_sub: (69, 71)
   parent: namespace_name
   parameters: [someRef:int&, somePtr:int*]
   return_type: void
Function: print
   language: cpp
   range: ((5, 12), (5, 25))
   substring: (120, 133)
   scope: namespace_name::student.
   parent: namespace_name::student
   return_type: void
Class: student
   language: cpp
   range: ((3, 4), (6, 5))
   substring: (76, 139)
   scope: namespace_name::
   body_sub: (90, 139)
   body: ['access_specifier', 'print']
   parent: namespace_name
Namespace: namespace_name
   language: cpp
   range: ((0, 0), (7, 1))
   substring: (0, 142)
   body_sub: (26, 142)
   body: ['add', 'student', ';']
   parent: test.cpp
=== Symbol Table for test.cs ===
File: test.cs
   language: python
   range: ((0, 0), (17, 1))
   substring: (0, 276)
   body_sub: (0, 276)
   body: ['comment', 'SampleNamespace', 'IEquatable']
Function: sum
   language: c_sharp
   range: ((6, 8), (10, 9))
   substring: (110, 215)
   scope: SampleNamespace::SampleClass.
   body_sub: (149, 215)
   parent: SampleNamespace::SampleClass
   parameters: [int a:int, int b:int]
   return_type: int
   has_return: True
Class: SampleClass
   language: c_sharp
   range: ((4, 4), (11, 5))
   substring: (78, 221)
   scope: SampleNamespace::
   docstring: // This is docstring
   body_sub: (100, 221)
   body: ['sum']
   parent: SampleNamespace
Namespace: SampleNamespace
   language: c_sharp
   range: ((1, 0), (12, 1))
   substring: (21, 223)
   docstring: // This is docstring
   body_sub: (47, 223)
   body: ['comment', 'SampleClass']
   parent: test.cs
Interface: IEquatable
   language: c_sharp
   range: ((14, 0), (17, 1))
   substring: (225, 276)
   body_sub: (249, 276)
   parent: test.cs
=== Symbol Table for test.ml ===
File: test.ml
   language: python
   range: ((0, 0), (14, 3))
   substring: (0, 365)
   body_sub: (0, 365)
   body: ['divide', 'callback', 'M', 'N']
Function: divide
   language: ocaml
   range: ((0, 0), (0, 28))
   substring: (0, 28)
   body_sub: (21, 28)
   parent: test.ml
   parameters: [x:int, y]
Function: callback
   language: ocaml
   range: ((1, 0), (1, 27))
   substring: (29, 56)
   body_sub: (52, 56)
   parent: test.ml
   parameters: [():unit]
   return_type: unit
Function: bump
   language: ocaml
   range: ((3, 4), (3, 37))
   substring: (79, 112)
   scope: M.
   body_sub: (102, 112)
   parent: M
   parameters: [?step:typeof(1), x]
Function: hline
   language: ocaml
   range: ((4, 4), (4, 42))
   substring: (117, 155)
   scope: M.
   body_sub: (142, 155)
   parent: M
   parameters: [~x, ~x, ~y]
Module: M
   language: ocaml
   range: ((2, 0), (5, 3))
   substring: (57, 159)
   body_sub: (66, 159)
   body: ['struct', 'bump', 'hline', 'end']
   parent: test.ml
Function: with_named_args
   language: ocaml
   range: ((7, 4), (7, 81))
   substring: (182, 259)
   scope: N.
   body_sub: (234, 259)
   parent: N
   parameters: [~named_arg1:int, ?named_arg2]
Function: f1
   language: ocaml
   range: ((9, 4), (9, 34))
   substring: (265, 295)
   scope: N.
   body_sub: (290, 295)
   parent: N
   parameters: [x:int, x:int]
   return_type: int
Function: f2
   language: ocaml
   range: ((10, 4), (10, 30))
   substring: (300, 326)
   scope: N.
   body_sub: (321, 326)
   parent: N
   parameters: [x:int, x:int]
   return_type: int
Value: v1
   language: ocaml
   range: ((12, 4), (12, 14))
   substring: (332, 342)
   scope: N.
   body_sub: (339, 342)
   parent: N
Value: v2
   language: ocaml
   range: ((13, 4), (13, 18))
   substring: (347, 361)
   scope: N.
   body_sub: (358, 361)
   parent: N
   type: int
Module: N
   language: ocaml
   range: ((6, 0), (14, 3))
   substring: (160, 365)
   body_sub: (169, 365)
   body: ['struct', 'with_named_args', 'f1', 'f2', 'v1', 'v2', 'end']
   parent: test.ml
=== Symbol Table for test.res ===
File: test.res
   language: python
   range: ((0, 0), (39, 2))
   substring: (0, 791)
   body_sub: (0, 791)
   body: ['z0', 'z1', 'z2', 'z', 'zz', 'zzz', 'mulWithDefault', 'SomeRSModule', 'multiple', 'bindings', 'let_declaration', 'myRecord', 'myList', 'conditional', 'sw']
Value: z0
   language: rescript
   range: ((0, 0), (0, 12))
   substring: (0, 12)
   body_sub: (9, 12)
   parent: test.res
Value: z1
   language: rescript
   range: ((1, 0), (1, 14))
   substring: (13, 27)
   body_sub: (24, 27)
   parent: test.res
   type: int
Value: z2
   language: rescript
   range: ((2, 0), (2, 16))
   substring: (28, 44)
   body_sub: (41, 44)
   parent: test.res
   type: int
Value: z
   language: rescript
   range: ((3, 0), (3, 15))
   substring: (45, 60)
   body_sub: (57, 60)
   parent: test.res
Value: zz
   language: rescript
   range: ((4, 0), (4, 22))
   substring: (61, 83)
   body_sub: (80, 83)
   parent: test.res
Value: zzz
   language: rescript
   range: ((5, 0), (5, 25))
   substring: (84, 109)
   body_sub: (106, 109)
   parent: test.res
Expression: expression$0
   language: rescript
   range: ((8, 4), (11, 5))
   substring: (159, 209)
   scope: mulWithDefault.
   parent: mulWithDefault
   code: switch (x * y) {
    | 0 => def
    | z => z
    }
Function: mulWithDefault
   language: rescript
   range: ((7, 0), (12, 1))
   substring: (111, 211)
   body_sub: (150, 211)
   body: ['expression$0']
   parent: test.res
   parameters: [~def:int, x, y]
Function: annot
   language: rescript
   range: ((15, 2), (15, 34))
   substring: (239, 271)
   scope: SomeRSModule.
   body_sub: (265, 271)
   parent: SomeRSModule
   parameters: [x:int]
   return_type: int
Function: paramsWithDefault
   language: rescript
   range: ((16, 2), (16, 79))
   substring: (274, 351)
   scope: SomeRSModule.
   body_sub: (347, 351)
   parent: SomeRSModule
   parameters: [~x:int=3, ~y=4.0, ~z:option<int>=?, ~w=?, ()]
Module: SomeRSModule
   language: rescript
   range: ((14, 0), (17, 1))
   substring: (213, 353)
   body_sub: (232, 353)
   body: ['annot', 'paramsWithDefault']
   parent: test.res
Function: multiple
   language: rescript
   range: ((19, 0), (19, 56))
   substring: (355, 411)
   body_sub: (395, 411)
   parent: test.res
   parameters: [x:int, y:int]
   return_type: int
Function: bindings
   language: rescript
   range: ((20, 0), (20, 40))
   substring: (412, 452)
   body_sub: (435, 452)
   parent: test.res
   parameters: [z:int]
   return_type: int
TypeDefinition: myRecord
   language: rescript
   range: ((24, 0), (24, 44))
   substring: (490, 534)
   parent: test.res
   type: {x: int, y?: option<string>}
TypeDefinition: myList
   language: rescript
   range: ((25, 0), (25, 23))
   substring: (535, 558)
   parent: test.res
   type: list<int>
Guard: guard$0
   language: rescript
   range: ((28, 7), (28, 15))
   substring: (593, 601)
   scope: conditional.expression$0.if$0.
   parent: conditional.expression$0.if$0
   condition: (x == 1)
Expression: expression$0
   language: rescript
   range: ((29, 8), (29, 29))
   substring: (612, 633)
   scope: conditional.expression$0.if$0.body$0.
   parent: conditional.expression$0.if$0.body$0
   code: Console.log("x is 1")
Body: body$0
   language: rescript
   range: ((28, 16), (30, 5))
   substring: (602, 639)
   scope: conditional.expression$0.if$0.
   body: ['expression$0']
   parent: conditional.expression$0.if$0
   block: ['expression$0']
Expression: expression$0
   language: rescript
   range: ((31, 8), (31, 33))
   substring: (655, 680)
   scope: conditional.expression$0.if$0.body$1.
   parent: conditional.expression$0.if$0.body$1
   code: Console.log("x is not 1")
Body: body$1
   language: rescript
   range: ((30, 11), (32, 5))
   substring: (645, 686)
   scope: conditional.expression$0.if$0.
   body: ['expression$0']
   parent: conditional.expression$0.if$0
   block: ['expression$0']
If: if$0
   language: rescript
   range: ((28, 4), (32, 5))
   substring: (590, 686)
   scope: conditional.expression$0.
   body: ['guard$0', 'body$0', 'body$1']
   parent: conditional.expression$0
   if_case: Case(guard$0, body$0)
   else_body: body$1
Expression: expression$0
   language: rescript
   range: ((28, 4), (32, 5))
   substring: (590, 686)
   scope: conditional.
   body: ['if$0']
   parent: conditional
   code: if$0
Value: conditional
   language: rescript
   range: ((27, 0), (33, 1))
   substring: (560, 688)
   body_sub: (581, 688)
   body: ['expression$0']
   parent: test.res
Value: sw
   language: rescript
   range: ((35, 0), (39, 2))
   substring: (690, 791)
   body_sub: (701, 791)
   parent: test.res
=== Symbol Table for test.rb ===
File: test.rb
   language: python
   range: ((0, 0), (50, 11))
   substring: (0, 1015)
   body_sub: (0, 1015)
   body: ['sum', 'output', 'greetings', 'swap', 'comment', 'Person', 'Cream', 'Foo']
Function: sum
   language: ruby
   range: ((0, 0), (3, 11))
   substring: (0, 77)
   body_sub: (26, 77)
   parent: test.rb
   parameters: [a, b]
Function: output
   language: ruby
   range: ((5, 8), (7, 11))
   substring: (87, 134)
   body_sub: (110, 134)
   parent: test.rb
Function: greetings
   language: ruby
   range: ((9, 8), (13, 11))
   substring: (144, 220)
   body_sub: (164, 220)
   parent: test.rb
   parameters: [a]
Function: swap
   language: ruby
   range: ((15, 8), (20, 11))
   substring: (230, 340)
   body_sub: (257, 340)
   parent: test.rb
   parameters: [a, b]
Function: initialize
   language: ruby
   range: ((26, 12), (29, 15))
   substring: (461, 558)
   scope: Person::
   body_sub: (503, 558)
   parent: Person
   parameters: [name, age]
Function: introduce
   language: ruby
   range: ((31, 12), (33, 15))
   substring: (572, 668)
   scope: Person::
   body_sub: (602, 668)
   parent: Person
Class: Person
   language: ruby
   range: ((23, 8), (34, 11))
   substring: (397, 680)
   docstring: # This is a docstring for class Person
   body_sub: (422, 680)
   body: ['class', 'constant', 'call', 'initialize', 'introduce', 'end']
   parent: test.rb
Function: cream?
   language: ruby
   range: ((37, 12), (39, 15))
   substring: (715, 762)
   scope: Cream::
   body_sub: (742, 762)
   parent: Cream
Module: Cream
   language: ruby
   range: ((36, 8), (40, 11))
   substring: (690, 774)
   body_sub: (715, 774)
   body: ['module', 'constant', 'cream?', 'end']
   parent: test.rb
Function: pour
   language: ruby
   range: ((44, 16), (48, 19))
   substring: (833, 987)
   scope: Foo::Bar::
   body_sub: (881, 987)
   parent: Foo::Bar
   parameters: [container, liquid]
Class: Bar
   language: ruby
   range: ((43, 12), (49, 15))
   substring: (807, 1003)
   scope: Foo::
   body_sub: (833, 1003)
   body: ['class', 'constant', 'pour', 'end']
   parent: Foo
Module: Foo
   language: ruby
   range: ((42, 8), (50, 11))
   substring: (784, 1015)
   body_sub: (807, 1015)
   body: ['module', 'constant', 'Bar', 'end']
   parent: test.rb
=== Symbol Table for test.lean ===
File: test.lean
   language: python
   range: ((0, 0), (31, 72))
   substring: (0, 1415)
   body_sub: (0, 1415)
   body: ['comment', 'getGreeting', 'comment', 'comment', 'main', 'Prio', 'constAlgHom_eq_algebra_ofId']
Def: getGreeting
   language: lean
   range: ((1, 0), (1, 71))
   substring: (65, 136)
   body_sub: (97, 99)
   parent: test.lean
Def: main
   language: lean
   range: ((4, 0), (11, 27))
   substring: (276, 549)
   body_sub: (295, 297)
   parent: test.lean
Structure: Algebra
   language: lean
   range: ((21, 0), (25, 22))
   substring: (993, 1233)
   scope: Prio.
   body_sub: (1007, 1233)
   parent: Prio
Section: Prio
   language: lean
   range: ((12, 0), (26, 8))
   substring: (550, 1242)
   body_sub: (562, 1242)
   body: ['section', 'identifier', 'comment', 'comment', 'comment', 'comment', 'comment', 'Algebra', 'end', 'identifier']
   parent: test.lean
Theorem: constAlgHom_eq_algebra_ofId
   language: lean
   range: ((27, 0), (30, 71))
   substring: (1243, 1414)
   body_sub: (1334, 1336)
   parent: test.lean

=== Project Map ===
File: test.c
  int aa()
  int * foo(int **x)
  int bb()
  int main()
File: test.js
  function f1()
  let f2 = x => x+1;
File: test.java
  public class Bicycle
    public void braking()
  public class Math
    public static int sum(int a, int b)
  interface Animal
File: test.ts
  type a = readonly b[][];
  function ts(x:number, opt?:string) : number
  function ts2() : array<number>
  class A
    constructor()
    async load(v: number)
  interface RunHelperSyncResult
  type HelperStatus = 'running' | 'done' | 'error' | 'accepted' | 'rejected'
  if$0 = `if guard$0: body$0 else: body$1`
    guard$0 = `(true)`
    body$0 = `['expression$0', 'expression$1']`
      expression$0 = `console.log("true")`
      expression$1 = `congole.log(42)`
    body$1 = `['expression$0']`
      expression$0 = `console.log("false")`
File: test.tsx
  expression$0 = `d = <div> "abc" </div>`
  function tsx()
File: test.py
  class A(C,D):
    expression$0 = `"""
    This is a docstring
    for class A
    """`
    def py(x, y):
      expression$0 = `"""This is a docstring"""`
  class B:
    async def insert_code(
            self, document: str, cursor_offset: int, goal: Optional[str] = None
        ) -> InsertCodeResult:
    async def load(self, v):
    class Nested:
      def nested():
  def outer_fun() -> None:
    def inner_fun() -> None:
  def some_conditionals(cond: str) -> None:
    expression$0 = `"""explanation"""`
    if$0 = `if guard$0: body$0 elif guard$1: body$1 elif guard$2: body$2 else: body$3`
      guard$0 = `cond == "a"`
      body$0 = `['pass_statement']`
      guard$1 = `cond == "b"`
      body$1 = `['pass_statement']`
      guard$2 = `cond == "c"`
      body$2 = `['pass_statement']`
      body$3 = `['pass_statement', 'pass_statement']`
    if$1 = `if guard$3: body$4`
      guard$3 = `34 == 34`
      body$4 = `['pass_statement', 'pass_statement']`
  def with_nested_conditionals(cond: str) -> None:
    if$0 = `if guard$0: body$0`
      guard$0 = `cond == "a"`
      body$0 = `['if$0', 'if$1']`
        if$0 = `if guard$0: body$0`
          guard$0 = `cond == "b"`
          body$0 = `['expression$0']`
            expression$0 = `x = call$0 + call$1`
              call$0 = `foo(1)`
              call$1 = `bar(2)`
        if$1 = `if guard$1: body$1`
          guard$1 = `cond == "c"`
          body$1 = `['call$0', 'call$1']`
            call$0 = `print("hello")`
            call$1 = `print("world")`
  for$0 = `for i in call$0: body$0`
    call$0 = `range(10)`
    body$0 = `['call$0', 'expression$0']`
      call$0 = `print(i+1)`
      expression$0 = `x = await(call$1)`
        call$1 = `get_some_value(i)`
File: test.cpp
  namespace namespace_name
    void add(int& someRef, int* somePtr)
    class student
      void print();
File: test.cs
  namespace SampleNamespace
    class SampleClass
      public int sum(int a, int b)
  interface IEquatable<T>
File: test.ml
  let divide (x:int) y
  let callback () : unit
  module M
    let bump ?(step = 1) x
    let hline ~x:x1 ~x:x2 ~y
  module N
    let with_named_args ~(named_arg1 : int) ?named_arg2
    let rec f1 (x:int) : int
    and f2 (x:int) : int
    let v1
    let v2:int
File: test.res
  let (z0)
  let z1:int
  let (z2:int)
  let z3 as z
  let (z4:int) as zz
  let ((z5:int) as zzz)
  let mulWithDefault = (~def: int, x, y)
    expression$0 = `switch (x * y) {
    | 0 => def
    | z => z
    }`
  module SomeRSModule
    let annot = (x:int) : int
    let paramsWithDefault = (~x: int=3, ~y=4.0, ~z: option<int>=?, ~w=?, ())
  let rec multiple = (x:int, y:int) : int
  and bindings = (z:int)
  type myRecord = {x: int, y?: option<string>}
  type myList = list<int>
  let conditional = ()
    expression$0 = `if$0`
      if$0 = `if guard$0: body$0 else: body$1`
        guard$0 = `(x == 1)`
        body$0 = `['expression$0']`
          expression$0 = `Console.log("x is 1")`
        body$1 = `['expression$0']`
          expression$0 = `Console.log("x is not 1")`
  let sw = x
File: test.rb
  def sum(a, b)
  def output
  def greetings(a)
  def swap(a, b)
  class Person
    def initialize(name, age)
    def introduce
  module Cream
    def cream?
  module Foo
    class Bar
      def pour(container, liquid)
File: test.lean
  def getGreeting (name : String)
  def main : IO Unit
  section Prio
    class Algebra
  @[simp]
  theorem constAlgHom_eq_algebra_ofId : constAlgHom R A R = Algebra.ofId R (A → R)