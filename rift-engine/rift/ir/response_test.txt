
New document1:
```
int aa() {
  return 0;
}

void foo(int **x) {
  if (x != NULL) {
    *x = 0;
  }
}

int bb() {
  return 0;
}

int main() {
  int *x;
  foo(&x);

  if (x != NULL) {
    *x = 1;
  }

  return 0;
}
```

New document2:
```
int aa() {
  return 0;
}

void foo(int **x) {
  *x = (int*) malloc(sizeof(int));
  **x = 0;
}

int bb() {
  return 0;
}

int main() {
  int *x;
  foo(&x);
  *x = 1;
  free(x);
  return 0;
}
```

New document3:
```
from typing import List, Tuple
def foo() -> None:
    print("Hello world!")

@cache
def get_num_tokens(content: str) -> int:
    return len(ENCODER.encode(content))

@cache
def get_num_tokens2(content: t1) -> List[t2]:
    return len(ENCODER.encode(content))

def bar() -> None:
    print("Hello world!")
```

New document4:
```
class TestAddDocs:
    def dump_elements(self, elements: List[str]) -> None:
        """
        The doc comment for dump_elements
        Spans multiple lines
        """
        def dump_symbol(symbol: SymbolInfo) -> None:
            decl_without_body = symbol.substring_without_body.decode()
            elements.append(decl_without_body)
            if isinstance(symbol, ContainerDeclaration):
                for statement in symbol.body:
                    dump_statement(statement)

        def dump_statement(statement: Statement) -> None:
            if isinstance(statement, Declaration):
                for symbol in statement.symbols:
                    dump_symbol(symbol)
            else:
                pass

        for statement in self.statements:
            dump_statement(statement)

        from typing import Tuple
        def foo() -> None:
            print("Hello world!")
```

New document5:
```
/**
* Adds two numbers together.
* 
* @param a - The first number to be added.
* @param b - The second number to be added.
* @returns The sum of the two numbers.
*/
function add(a: number, b: number) : number {
    return a + b;
}

class Employee {
    empCode: number;
    empName: string;

    constructor(code: number, name: string) {
            this.empName = name;
            this.empCode = code;
    }

    /**
     * Returns the salary of an employee.
     * 
     * @returns The salary as a number.
     */
    getSalary() : number {
        return 10000;
    }
}
```